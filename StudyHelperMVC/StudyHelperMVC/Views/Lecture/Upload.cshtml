@{
    ViewData["Title"] = "Загрузить лекцию";
}
<h2>Загрузить лекцию</h2>

<input type="file" id="fileInput" accept="application/pdf" />
<button id="btnStart" class="btn-primary">Начать</button>

<div id="streamArea" style="white-space: pre-wrap; background:#fff; padding:12px; border-radius:8px; margin-top:16px; min-height:200px;"></div>

<div style="margin-top:12px;">
    <select id="subjectSelect"></select>
    <button id="btnSave" class="btn-primary" disabled>Сохранить в библиотеку</button>
</div>

<script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<script>
    document.getElementById("btnStart").addEventListener("click", async () => {
        const file = document.getElementById("fileInput").files[0];
        if (!file) { alert("Выберите PDF"); return; }

        // 1) upload file
        const fd = new FormData();
        fd.append("file", file);
        const res = await fetch('/Lecture/UploadTemp', { method: 'POST', body: fd });
        if (!res.ok) { alert("Ошибка загрузки"); return; }
        const json = await res.json();
        const fileId = json.fileId;
        const fileName = json.fileName;

        // 2) open SSE
        const streamArea = document.getElementById("streamArea");
        streamArea.textContent = "";
        const evt = new EventSource(`/Lecture/StreamLecture?fileId=${fileId}`);

        evt.addEventListener("data", e => {
            // data arrives escaped with \n; unescape
            const text = e.data.replace(/\\n/g, '\n');
            streamArea.textContent += text;
            // live typesetting for math
            if (window.MathJax) {
                MathJax.typesetPromise([streamArea]).catch((err)=>console.log(err));
            }
        });

        evt.addEventListener("error", e => {
            console.error("SSE error", e);
            evt.close();
        });

        evt.addEventListener("done", e => {
            evt.close();
            // после завершения включаем кнопку сохранить
            document.getElementById("btnSave").disabled = false;
            // сохраняем final content in dataset for convenience
            streamArea.dataset.final = streamArea.textContent;
            // choose default subject if exists
        });

        // загрузим список предметов пользователя для select
        loadSubjects();
    });

    async function loadSubjects() {
        const res = await fetch('/Library/GetMySubjects'); // реализуй в LibraryController
        if (!res.ok) return;
        const arr = await res.json();
        const sel = document.getElementById("subjectSelect");
        sel.innerHTML = '';
        arr.forEach(s => {
            const opt = document.createElement("option");
            opt.value = s.id;
            opt.textContent = s.name;
            sel.appendChild(opt);
        });
    }

    document.getElementById("btnSave").addEventListener("click", async () => {
        const sel = document.getElementById("subjectSelect");
        const subjectId = parseInt(sel.value);
        const content = document.getElementById("streamArea").dataset.final || document.getElementById("streamArea").textContent;
        const fileName = document.getElementById("fileInput").files[0]?.name ?? "Lecture.pdf";

        const res = await fetch('/Library/SaveLecture', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ subjectId, fileName, content })
        });
        if (res.ok) {
            alert('Сохранено в библиотеку');
            document.getElementById("btnSave").disabled = true;
        } else {
            alert('Ошибка сохранения');
        }
    });
</script>
